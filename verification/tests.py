"""
TESTS is a dict with all of your tests.
Keys for this will be the categories' names.
Each test is a dict with
    "input" -- input data for a user function
    "answer" -- your right answer
    "explanation" -- not necessarily a key, it's used for an additional info in animation.
"""


def make_tests(*tests):
    for test in tests:
        views, answer, expalanation = test
        yield {
            'input': views.split(),
            'answer': answer,
            'explanation': expalanation,
        }


TESTS = {
    "Basics": list(make_tests(
        # monolith
        ('BCDGHILMNQRSVWX CHMRW LMN', 15,
         [[1, 4, 2], [2, 4, 2], [3, 4, 2], [1, 3, 2], [2, 3, 2], [3, 3, 2], [1, 2, 2], [2, 2, 2], [3, 2, 2], [1, 1, 2],
          [2, 1, 2], [3, 1, 2], [1, 0, 2], [2, 0, 2], [3, 0, 2]]),
        # cube
        ('GHILMNQRS GHILMNQRS GHILMNQRS', 27,
         [[1, 3, 3], [1, 3, 2], [1, 3, 1], [2, 3, 3], [2, 3, 2], [2, 3, 1], [3, 3, 3], [3, 3, 2], [3, 3, 1], [1, 2, 3],
          [1, 2, 2], [1, 2, 1], [2, 2, 3], [2, 2, 2], [2, 2, 1], [3, 2, 3], [3, 2, 2], [3, 2, 1], [1, 1, 3], [1, 1, 2],
          [1, 1, 1], [2, 1, 3], [2, 1, 2], [2, 1, 1], [3, 1, 3], [3, 1, 2], [3, 1, 1]]),
        # crystal
        ('GIMQS GIMQS GIMQS', 9,
         [[1, 3, 3], [1, 3, 1], [3, 3, 3], [3, 3, 1], [2, 2, 2], [1, 1, 3], [1, 1, 1], [3, 1, 3], [3, 1, 1]]),
        # slope
        ('AFGKLMPQRSUVWXY AFGKLMPQRSUVWXY ABCDEFGHIJKLMNOPQRSTUVWXY', 55,
         [[0, 4, 0], [0, 3, 1], [0, 3, 0], [1, 3, 1], [1, 3, 0], [0, 2, 2], [0, 2, 1], [0, 2, 0], [1, 2, 2], [1, 2, 1],
          [1, 2, 0], [2, 2, 2], [2, 2, 1], [2, 2, 0], [0, 1, 3], [0, 1, 2], [0, 1, 1], [0, 1, 0], [1, 1, 3], [1, 1, 2],
          [1, 1, 1], [1, 1, 0], [2, 1, 3], [2, 1, 2], [2, 1, 1], [2, 1, 0], [3, 1, 3], [3, 1, 2], [3, 1, 1], [3, 1, 0],
          [0, 0, 4], [0, 0, 3], [0, 0, 2], [0, 0, 1], [0, 0, 0], [1, 0, 4], [1, 0, 3], [1, 0, 2], [1, 0, 1], [1, 0, 0],
          [2, 0, 4], [2, 0, 3], [2, 0, 2], [2, 0, 1], [2, 0, 0], [3, 0, 4], [3, 0, 3], [3, 0, 2], [3, 0, 1], [3, 0, 0],
          [4, 0, 4], [4, 0, 3], [4, 0, 2], [4, 0, 1], [4, 0, 0]]),
    )),
    "Extra": list(make_tests(
        # !
        ('CHMW CHMW M', 4, [[2, 4, 2], [2, 3, 2], [2, 2, 2], [2, 0, 2]]),
        # chair
        ('BCDGHILMNQSVX DILMNQSVX GHILMNQRS', 23,
         [[1, 4, 3], [2, 4, 3], [3, 4, 3], [1, 3, 3], [2, 3, 3], [3, 3, 3], [1, 2, 3], [1, 2, 2], [1, 2, 1], [2, 2, 3],
          [2, 2, 2], [2, 2, 1], [3, 2, 3], [3, 2, 2], [3, 2, 1], [1, 1, 3], [1, 1, 1], [3, 1, 3], [3, 1, 1], [1, 0, 3],
          [1, 0, 1], [3, 0, 3], [3, 0, 1]]),
        # desk
        ('FGHIJKNOPSTUY GHIJLMNOQRSTVY ABCDEFGHIJKLMNOPQRST', 48,
         [[0, 3, 4], [0, 3, 3], [0, 3, 2], [0, 3, 1], [1, 3, 4], [1, 3, 3], [1, 3, 2], [1, 3, 1], [2, 3, 4], [2, 3, 3],
          [2, 3, 2], [2, 3, 1], [3, 3, 4], [3, 3, 3], [3, 3, 2], [3, 3, 1], [4, 3, 4], [4, 3, 3], [4, 3, 2], [4, 3, 1],
          [0, 2, 4], [0, 2, 3], [0, 2, 2], [0, 2, 1], [3, 2, 4], [3, 2, 3], [3, 2, 2], [3, 2, 1], [4, 2, 4], [4, 2, 3],
          [4, 2, 2], [4, 2, 1], [0, 1, 4], [0, 1, 3], [0, 1, 2], [0, 1, 1], [3, 1, 4], [3, 1, 3], [3, 1, 2], [3, 1, 1],
          [4, 1, 4], [4, 1, 3], [4, 1, 2], [4, 1, 1], [0, 0, 4], [0, 0, 1], [4, 0, 4], [4, 0, 1]]),
        # fort
        ('ACEFGHIJKLMNOPQSTUVXY ACEFGHIJKLMNOPQRSTUVWXY ABCDEFJKOPTUVWXY', 68,
         [[0, 4, 4], [0, 4, 2], [0, 4, 0], [2, 4, 4], [2, 4, 0], [4, 4, 4], [4, 4, 2], [4, 4, 0], [0, 3, 4], [0, 3, 3],
          [0, 3, 2], [0, 3, 1], [0, 3, 0], [1, 3, 4], [1, 3, 0], [2, 3, 4], [2, 3, 0], [3, 3, 4], [3, 3, 0], [4, 3, 4],
          [4, 3, 3], [4, 3, 2], [4, 3, 1], [4, 3, 0], [0, 2, 4], [0, 2, 3], [0, 2, 2], [0, 2, 1], [0, 2, 0], [1, 2, 4],
          [1, 2, 0], [2, 2, 4], [2, 2, 0], [3, 2, 4], [3, 2, 0], [4, 2, 4], [4, 2, 3], [4, 2, 2], [4, 2, 1], [4, 2, 0],
          [0, 1, 4], [0, 1, 3], [0, 1, 2], [0, 1, 1], [0, 1, 0], [1, 1, 4], [1, 1, 0], [3, 1, 4], [3, 1, 0], [4, 1, 4],
          [4, 1, 3], [4, 1, 2], [4, 1, 1], [4, 1, 0], [0, 0, 4], [0, 0, 3], [0, 0, 2], [0, 0, 1], [0, 0, 0], [1, 0, 4],
          [1, 0, 0], [3, 0, 4], [3, 0, 0], [4, 0, 4], [4, 0, 3], [4, 0, 2], [4, 0, 1], [4, 0, 0]]),
        # tomb and zombie
        ('DFGHIJKLMNOPQRSTUVWY EGIJLOQTUVWY CDEHJKLMPQRUVW', 32,
         [[3, 4, 4], [0, 3, 1], [1, 3, 1], [2, 3, 4], [2, 3, 3], [2, 3, 1], [3, 3, 4], [4, 3, 4], [4, 3, 3], [0, 2, 1],
          [1, 2, 1], [2, 2, 4], [2, 2, 1], [3, 2, 4], [4, 2, 4], [0, 1, 1], [1, 1, 1], [2, 1, 4], [2, 1, 1], [3, 1, 4],
          [4, 1, 4], [0, 0, 2], [0, 0, 1], [0, 0, 0], [1, 0, 2], [1, 0, 1], [1, 0, 0], [2, 0, 4], [2, 0, 2], [2, 0, 1],
          [2, 0, 0], [4, 0, 4]]),
        # cross
        ('CGHIMRVWX UVWXYEJOT BCDGHILMNQRSVWX', 21,
         [[2, 4, 4], [1, 3, 4], [2, 3, 4], [3, 3, 4], [2, 2, 4], [2, 1, 4], [1, 0, 4], [1, 0, 3], [1, 0, 2], [1, 0, 1],
          [1, 0, 0], [2, 0, 4], [2, 0, 3], [2, 0, 2], [2, 0, 1], [2, 0, 0], [3, 0, 4], [3, 0, 3], [3, 0, 2], [3, 0, 1],
          [3, 0, 0]]),
        # astronout
        ('ABFGDHIJNORTWYMLQVS BGLQVDINSXJO PQDHIJ', 21,
         [[0, 4, 1], [1, 4, 1], [0, 3, 1], [1, 3, 1], [3, 4, 3], [2, 3, 3], [3, 3, 4], [3, 3, 3], [4, 3, 3], [3, 2, 4],
          [3, 2, 3], [4, 2, 3], [2, 1, 3], [4, 1, 3], [2, 0, 3], [4, 0, 3], [2, 2, 3], [1, 2, 1], [1, 1, 1], [1, 0, 1],
          [3, 1, 3]]),
        # dice
        ('ABCDEFHJKLNOPRTUVWXY ABCDEFGHIJKLNOPQRSTUVWXY ABCDEFHJKLMNOPRTUVWXY', 84,
         [[0, 4, 4], [0, 4, 3], [0, 4, 2], [0, 4, 1], [0, 4, 0], [1, 4, 4], [1, 4, 2], [1, 4, 0], [2, 4, 4], [2, 4, 3],
          [2, 4, 2], [2, 4, 1], [2, 4, 0], [3, 4, 4], [3, 4, 2], [3, 4, 0], [4, 4, 4], [4, 4, 3], [4, 4, 2], [4, 4, 1],
          [4, 4, 0], [0, 3, 4], [0, 3, 3], [0, 3, 2], [0, 3, 1], [0, 3, 0], [2, 3, 4], [2, 3, 3], [2, 3, 2], [2, 3, 1],
          [2, 3, 0], [4, 3, 4], [4, 3, 3], [4, 3, 2], [4, 3, 1], [4, 3, 0], [0, 2, 4], [0, 2, 3], [0, 2, 1], [0, 2, 0],
          [1, 2, 4], [1, 2, 0], [3, 2, 4], [3, 2, 0], [4, 2, 4], [4, 2, 3], [4, 2, 1], [4, 2, 0], [0, 1, 4], [0, 1, 3],
          [0, 1, 2], [0, 1, 1], [0, 1, 0], [2, 1, 4], [2, 1, 3], [2, 1, 2], [2, 1, 1], [2, 1, 0], [4, 1, 4], [4, 1, 3],
          [4, 1, 2], [4, 1, 1], [4, 1, 0], [0, 0, 4], [0, 0, 3], [0, 0, 2], [0, 0, 1], [0, 0, 0], [1, 0, 4], [1, 0, 2],
          [1, 0, 0], [2, 0, 4], [2, 0, 3], [2, 0, 2], [2, 0, 1], [2, 0, 0], [3, 0, 4], [3, 0, 2], [3, 0, 0], [4, 0, 4],
          [4, 0, 3], [4, 0, 2], [4, 0, 1], [4, 0, 0]]),

    ))
}
